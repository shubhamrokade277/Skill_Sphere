{"ast":null,"code":"// Copyright 2017 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n'use strict';\n\nconst childProcess = require('child_process');\n\nconst {\n  isLinux,\n  getReport\n} = require('./process');\n\nconst {\n  LDD_PATH,\n  readFile,\n  readFileSync\n} = require('./filesystem');\n\nlet cachedFamilyFilesystem;\nlet cachedVersionFilesystem;\nconst command = 'getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true';\nlet commandOut = '';\n\nconst safeCommand = () => {\n  if (!commandOut) {\n    return new Promise(resolve => {\n      childProcess.exec(command, (err, out) => {\n        commandOut = err ? ' ' : out;\n        resolve(commandOut);\n      });\n    });\n  }\n\n  return commandOut;\n};\n\nconst safeCommandSync = () => {\n  if (!commandOut) {\n    try {\n      commandOut = childProcess.execSync(command, {\n        encoding: 'utf8'\n      });\n    } catch (_err) {\n      commandOut = ' ';\n    }\n  }\n\n  return commandOut;\n};\n/**\n * A String constant containing the value `glibc`.\n * @type {string}\n * @public\n */\n\n\nconst GLIBC = 'glibc';\n/**\n * A Regexp constant to get the GLIBC Version.\n * @type {string}\n */\n\nconst RE_GLIBC_VERSION = /LIBC[a-z0-9 \\-).]*?(\\d+\\.\\d+)/i;\n/**\n * A String constant containing the value `musl`.\n * @type {string}\n * @public\n */\n\nconst MUSL = 'musl';\n\nconst isFileMusl = f => f.includes('libc.musl-') || f.includes('ld-musl-');\n\nconst familyFromReport = () => {\n  const report = getReport();\n\n  if (report.header && report.header.glibcVersionRuntime) {\n    return GLIBC;\n  }\n\n  if (Array.isArray(report.sharedObjects)) {\n    if (report.sharedObjects.some(isFileMusl)) {\n      return MUSL;\n    }\n  }\n\n  return null;\n};\n\nconst familyFromCommand = out => {\n  const [getconf, ldd1] = out.split(/[\\r\\n]+/);\n\n  if (getconf && getconf.includes(GLIBC)) {\n    return GLIBC;\n  }\n\n  if (ldd1 && ldd1.includes(MUSL)) {\n    return MUSL;\n  }\n\n  return null;\n};\n\nconst getFamilyFromLddContent = content => {\n  if (content.includes('musl')) {\n    return MUSL;\n  }\n\n  if (content.includes('GNU C Library')) {\n    return GLIBC;\n  }\n\n  return null;\n};\n\nconst familyFromFilesystem = async () => {\n  if (cachedFamilyFilesystem !== undefined) {\n    return cachedFamilyFilesystem;\n  }\n\n  cachedFamilyFilesystem = null;\n\n  try {\n    const lddContent = await readFile(LDD_PATH);\n    cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\n  } catch (e) {}\n\n  return cachedFamilyFilesystem;\n};\n\nconst familyFromFilesystemSync = () => {\n  if (cachedFamilyFilesystem !== undefined) {\n    return cachedFamilyFilesystem;\n  }\n\n  cachedFamilyFilesystem = null;\n\n  try {\n    const lddContent = readFileSync(LDD_PATH);\n    cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\n  } catch (e) {}\n\n  return cachedFamilyFilesystem;\n};\n/**\n * Resolves with the libc family when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\n\n\nconst family = async () => {\n  let family = null;\n\n  if (isLinux()) {\n    family = await familyFromFilesystem();\n\n    if (!family) {\n      family = familyFromReport();\n    }\n\n    if (!family) {\n      const out = await safeCommand();\n      family = familyFromCommand(out);\n    }\n  }\n\n  return family;\n};\n/**\n * Returns the libc family when it can be determined, `null` otherwise.\n * @returns {?string}\n */\n\n\nconst familySync = () => {\n  let family = null;\n\n  if (isLinux()) {\n    family = familyFromFilesystemSync();\n\n    if (!family) {\n      family = familyFromReport();\n    }\n\n    if (!family) {\n      const out = safeCommandSync();\n      family = familyFromCommand(out);\n    }\n  }\n\n  return family;\n};\n/**\n * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {Promise<boolean>}\n */\n\n\nconst isNonGlibcLinux = async () => isLinux() && (await family()) !== GLIBC;\n/**\n * Returns `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {boolean}\n */\n\n\nconst isNonGlibcLinuxSync = () => isLinux() && familySync() !== GLIBC;\n\nconst versionFromFilesystem = async () => {\n  if (cachedVersionFilesystem !== undefined) {\n    return cachedVersionFilesystem;\n  }\n\n  cachedVersionFilesystem = null;\n\n  try {\n    const lddContent = await readFile(LDD_PATH);\n    const versionMatch = lddContent.match(RE_GLIBC_VERSION);\n\n    if (versionMatch) {\n      cachedVersionFilesystem = versionMatch[1];\n    }\n  } catch (e) {}\n\n  return cachedVersionFilesystem;\n};\n\nconst versionFromFilesystemSync = () => {\n  if (cachedVersionFilesystem !== undefined) {\n    return cachedVersionFilesystem;\n  }\n\n  cachedVersionFilesystem = null;\n\n  try {\n    const lddContent = readFileSync(LDD_PATH);\n    const versionMatch = lddContent.match(RE_GLIBC_VERSION);\n\n    if (versionMatch) {\n      cachedVersionFilesystem = versionMatch[1];\n    }\n  } catch (e) {}\n\n  return cachedVersionFilesystem;\n};\n\nconst versionFromReport = () => {\n  const report = getReport();\n\n  if (report.header && report.header.glibcVersionRuntime) {\n    return report.header.glibcVersionRuntime;\n  }\n\n  return null;\n};\n\nconst versionSuffix = s => s.trim().split(/\\s+/)[1];\n\nconst versionFromCommand = out => {\n  const [getconf, ldd1, ldd2] = out.split(/[\\r\\n]+/);\n\n  if (getconf && getconf.includes(GLIBC)) {\n    return versionSuffix(getconf);\n  }\n\n  if (ldd1 && ldd2 && ldd1.includes(MUSL)) {\n    return versionSuffix(ldd2);\n  }\n\n  return null;\n};\n/**\n * Resolves with the libc version when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\n\n\nconst version = async () => {\n  let version = null;\n\n  if (isLinux()) {\n    version = await versionFromFilesystem();\n\n    if (!version) {\n      version = versionFromReport();\n    }\n\n    if (!version) {\n      const out = await safeCommand();\n      version = versionFromCommand(out);\n    }\n  }\n\n  return version;\n};\n/**\n * Returns the libc version when it can be determined, `null` otherwise.\n * @returns {?string}\n */\n\n\nconst versionSync = () => {\n  let version = null;\n\n  if (isLinux()) {\n    version = versionFromFilesystemSync();\n\n    if (!version) {\n      version = versionFromReport();\n    }\n\n    if (!version) {\n      const out = safeCommandSync();\n      version = versionFromCommand(out);\n    }\n  }\n\n  return version;\n};\n\nmodule.exports = {\n  GLIBC,\n  MUSL,\n  family,\n  familySync,\n  isNonGlibcLinux,\n  isNonGlibcLinuxSync,\n  version,\n  versionSync\n};","map":{"version":3,"names":["childProcess","require","isLinux","getReport","LDD_PATH","readFile","readFileSync","cachedFamilyFilesystem","cachedVersionFilesystem","command","commandOut","safeCommand","Promise","resolve","exec","err","out","safeCommandSync","execSync","encoding","_err","GLIBC","RE_GLIBC_VERSION","MUSL","isFileMusl","f","includes","familyFromReport","report","header","glibcVersionRuntime","Array","isArray","sharedObjects","some","familyFromCommand","getconf","ldd1","split","getFamilyFromLddContent","content","familyFromFilesystem","undefined","lddContent","e","familyFromFilesystemSync","family","familySync","isNonGlibcLinux","isNonGlibcLinuxSync","versionFromFilesystem","versionMatch","match","versionFromFilesystemSync","versionFromReport","versionSuffix","s","trim","versionFromCommand","ldd2","version","versionSync","module","exports"],"sources":["D:/CDAC PROJECT/Skill_Sphere/frontend-elearning/node_modules/detect-libc/lib/detect-libc.js"],"sourcesContent":["// Copyright 2017 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst childProcess = require('child_process');\nconst { isLinux, getReport } = require('./process');\nconst { LDD_PATH, readFile, readFileSync } = require('./filesystem');\n\nlet cachedFamilyFilesystem;\nlet cachedVersionFilesystem;\n\nconst command = 'getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true';\nlet commandOut = '';\n\nconst safeCommand = () => {\n  if (!commandOut) {\n    return new Promise((resolve) => {\n      childProcess.exec(command, (err, out) => {\n        commandOut = err ? ' ' : out;\n        resolve(commandOut);\n      });\n    });\n  }\n  return commandOut;\n};\n\nconst safeCommandSync = () => {\n  if (!commandOut) {\n    try {\n      commandOut = childProcess.execSync(command, { encoding: 'utf8' });\n    } catch (_err) {\n      commandOut = ' ';\n    }\n  }\n  return commandOut;\n};\n\n/**\n * A String constant containing the value `glibc`.\n * @type {string}\n * @public\n */\nconst GLIBC = 'glibc';\n\n/**\n * A Regexp constant to get the GLIBC Version.\n * @type {string}\n */\nconst RE_GLIBC_VERSION = /LIBC[a-z0-9 \\-).]*?(\\d+\\.\\d+)/i;\n\n/**\n * A String constant containing the value `musl`.\n * @type {string}\n * @public\n */\nconst MUSL = 'musl';\n\nconst isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-');\n\nconst familyFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return GLIBC;\n  }\n  if (Array.isArray(report.sharedObjects)) {\n    if (report.sharedObjects.some(isFileMusl)) {\n      return MUSL;\n    }\n  }\n  return null;\n};\n\nconst familyFromCommand = (out) => {\n  const [getconf, ldd1] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return GLIBC;\n  }\n  if (ldd1 && ldd1.includes(MUSL)) {\n    return MUSL;\n  }\n  return null;\n};\n\nconst getFamilyFromLddContent = (content) => {\n  if (content.includes('musl')) {\n    return MUSL;\n  }\n  if (content.includes('GNU C Library')) {\n    return GLIBC;\n  }\n  return null;\n};\n\nconst familyFromFilesystem = async () => {\n  if (cachedFamilyFilesystem !== undefined) {\n    return cachedFamilyFilesystem;\n  }\n  cachedFamilyFilesystem = null;\n  try {\n    const lddContent = await readFile(LDD_PATH);\n    cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\n  } catch (e) {}\n  return cachedFamilyFilesystem;\n};\n\nconst familyFromFilesystemSync = () => {\n  if (cachedFamilyFilesystem !== undefined) {\n    return cachedFamilyFilesystem;\n  }\n  cachedFamilyFilesystem = null;\n  try {\n    const lddContent = readFileSync(LDD_PATH);\n    cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\n  } catch (e) {}\n  return cachedFamilyFilesystem;\n};\n\n/**\n * Resolves with the libc family when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst family = async () => {\n  let family = null;\n  if (isLinux()) {\n    family = await familyFromFilesystem();\n    if (!family) {\n      family = familyFromReport();\n    }\n    if (!family) {\n      const out = await safeCommand();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\n * Returns the libc family when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst familySync = () => {\n  let family = null;\n  if (isLinux()) {\n    family = familyFromFilesystemSync();\n    if (!family) {\n      family = familyFromReport();\n    }\n    if (!family) {\n      const out = safeCommandSync();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\n * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {Promise<boolean>}\n */\nconst isNonGlibcLinux = async () => isLinux() && await family() !== GLIBC;\n\n/**\n * Returns `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {boolean}\n */\nconst isNonGlibcLinuxSync = () => isLinux() && familySync() !== GLIBC;\n\nconst versionFromFilesystem = async () => {\n  if (cachedVersionFilesystem !== undefined) {\n    return cachedVersionFilesystem;\n  }\n  cachedVersionFilesystem = null;\n  try {\n    const lddContent = await readFile(LDD_PATH);\n    const versionMatch = lddContent.match(RE_GLIBC_VERSION);\n    if (versionMatch) {\n      cachedVersionFilesystem = versionMatch[1];\n    }\n  } catch (e) {}\n  return cachedVersionFilesystem;\n};\n\nconst versionFromFilesystemSync = () => {\n  if (cachedVersionFilesystem !== undefined) {\n    return cachedVersionFilesystem;\n  }\n  cachedVersionFilesystem = null;\n  try {\n    const lddContent = readFileSync(LDD_PATH);\n    const versionMatch = lddContent.match(RE_GLIBC_VERSION);\n    if (versionMatch) {\n      cachedVersionFilesystem = versionMatch[1];\n    }\n  } catch (e) {}\n  return cachedVersionFilesystem;\n};\n\nconst versionFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return report.header.glibcVersionRuntime;\n  }\n  return null;\n};\n\nconst versionSuffix = (s) => s.trim().split(/\\s+/)[1];\n\nconst versionFromCommand = (out) => {\n  const [getconf, ldd1, ldd2] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return versionSuffix(getconf);\n  }\n  if (ldd1 && ldd2 && ldd1.includes(MUSL)) {\n    return versionSuffix(ldd2);\n  }\n  return null;\n};\n\n/**\n * Resolves with the libc version when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst version = async () => {\n  let version = null;\n  if (isLinux()) {\n    version = await versionFromFilesystem();\n    if (!version) {\n      version = versionFromReport();\n    }\n    if (!version) {\n      const out = await safeCommand();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\n\n/**\n * Returns the libc version when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst versionSync = () => {\n  let version = null;\n  if (isLinux()) {\n    version = versionFromFilesystemSync();\n    if (!version) {\n      version = versionFromReport();\n    }\n    if (!version) {\n      const out = safeCommandSync();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\n\nmodule.exports = {\n  GLIBC,\n  MUSL,\n  family,\n  familySync,\n  isNonGlibcLinux,\n  isNonGlibcLinuxSync,\n  version,\n  versionSync\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}